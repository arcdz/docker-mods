#!/usr/bin/with-contenv bash

cat <<EOF
----------------
>>> ConfigIt Mod for Servarr Apps. by arcodz <<<

Repos:
  Dev/test: https://github.com/arcodz/servarr-configit
  Prod: https://github.com/linuxserver/docker-mods/tree/servarr-configit

Version: {{VERSION}}
----------------
EOF

# Path to the config.xml file
config_file="config/config.xml"

# Attributes accepted as input for mod:
attributes=(
"BindAddress"
"Port"
"SslPort"
"EnableSsl"
"LaunchBrowser"
"ApiKey"
"AuthenticationMethod"
"AuthenticationRequired"
"Branch"
"LogLevel"
"SslCertPath"
"SslCertPassword"
"UrlBase"
"InstanceName"
"UpdateMechanism");

# Get existent config.xml
# Turn config.xml into an associative array (dictionary)
declare -A config_xml_from_file

# Parse the XML and extract tag-value pairs
while read -r line; do
  if [[ $line =~ \<([^\/]+)\>([^<]+)\<\/.+\> ]]; then
    key="${BASH_REMATCH[1]}"
    value="${BASH_REMATCH[2]}"
    config_xml_from_file[$key]="$value"
  fi
done < <(grep -Eo '<[^/]+>[^<]*</[^>]+>' "$config_file")

# Loop through each attribute
for attribute in "${attributes[@]}"; do
    # Check if the attribute variable is set (not empty)
    if [[ -n "${!attribute}" ]]; then
        config_xml_from_file["$attribute"]="${!attribute}"
    fi
done

# Generate new XML content
xml_content="<Config>\n"
for key in "${!config_xml_from_file[@]}"; do
    xml_content+="  <$key>${config_xml_from_file[$key]}</$key>\n"
done
xml_content+="</Config>"

# Write the new content to config.xml
echo -e "$xml_content" > "$config_file"

echo "config.xml has been updated successfully."

##########################################################
#
## radarr
#declare -A config_xml_default=(
#  ["BindAddress"]="*"
#  ["Port"]="7878"
#  ["SslPort"]="9898"
#  ["EnableSsl"]="False"
#  ["LaunchBrowser"]="True"
#  ["ApiKey"]=""
#  ["AuthenticationMethod"]="None"
#  ["AuthenticationRequired"]="Enabled"
#  ["Branch"]="master"
#  ["LogLevel"]="debug"
#  ["SslCertPath"]=""
#  ["SslCertPassword"]=""
#  ["UrlBase"]=""
#  ["InstanceName"]="Radarr"
#  ["UpdateMechanism"]="Docker"
#)
#
#attributes=(
#"BindAddress",
#"Port",
#"SslPort",
#"EnableSsl",
#"LaunchBrowser",
#"ApiKey",
#"AuthenticationMethod",
#"AuthenticationRequired",
#"Branch",
#"LogLevel",
#"SslCertPath",
#"SslCertPassword",
#"UrlBase",
#"InstanceName",
#"UpdateMechanism");
#
#values_default=("")
#


####### default:
## Determine if setup is needed
#if [ ! -f /usr/bin/mkvmerge ]; then
#  echo "**** Adding striptracks deps to package install list ****"
#  echo "mkvtoolnix" >> /mod-repo-packages-to-install.list
#else
#  echo "**** striptracks deps already installed, skipping ****"
#fi
#
## Check ownership and attributes on each script file
#for file in /usr/local/bin/striptracks*.sh
#do
#  # Change ownership
#  if [ $(stat -c '%G' $file) != "abc" ]; then
#    echo "Changing ownership on $file script."
#    lsiown abc:abc $file
#  fi
#
#  # Make executable
#  if [ ! -x $file ]; then
#    echo "Making $file script executable."
#    chmod +x $file
#  fi
#done
